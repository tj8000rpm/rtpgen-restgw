#!/usr/bin/env python3.6
# -*- coding:utf-8 -*-

import unittest
import os
import json
import logging as log
import socket
import werkzeug.exceptions 
from time import time, sleep
from threading import Thread
from logging import getLogger, Formatter, StreamHandler
from flask import Flask, request, jsonify

import protolib
import protolib.ipc_pack_pb2 as pb

''' ENVIROMENT VARIABLEs '''
api_ip         =     os.getenv("API_IP"        , "0.0.0.0"    )
api_port       = int(os.getenv("API_PORT"      , 5000        ))
bind_ip        =     os.getenv("BIND_IP"       , "0.0.0.0"    )
bind_port      = int(os.getenv("BIND_PORT"     , 12345       ))
max_session    = int(os.getenv("MAX_SESSION"   , 3500        ))
loglevel       = int(os.getenv("LOGLEVEL"      , log.DEBUG   ))
audio_file     =     os.getenv("AUDIO_FILE"    , None         )

''' global variables '''
app = Flask(__name__)
logger = getLogger(__name__)
terms=[]
rscMap={}

''' API Call '''
@app.route('/v1/id/<port>:<cic>',
        defaults={'destIP':None, 'destPort':None}, methods=['GET','DELETE'])
@app.route('/v1/id/<port>:<cic>/<srcIP>:<srcPort>/<destIP>:<destPort>',
        methods=['POST','PUT'])
def assign(port,cic,destIP,destPort,srcIP,srcPort):
    retCode=200
    result={}
    try:
        port=int(port)
        cic=int(cic)

        if request.method in ['DELETE','PUT']:
            if not terms[cic]:
                retCode=404
                raise KeyError('id:{} does not exist'.format(cic))
            #delResource(cic)
        if request.method in ['PUT', 'POST']:
            destPort=int(destPort)
            if terms[cic]:
                retCode=403
                raise KeyError('id:{} already exists'.format(cic))
            #addResource(cic, destIP, destPort)
        if request.method in ['GET']:
            result['id']=cic
            result['dest']=terms[cic]
    except IndexError as e:
        retCode=400
        result['error']='id out of range'
    except ValueError as e:
        retCode=400
        result['error']='input is not a number'
    except TypeError as e:
        retCode=400
        result['error']=e.__str__()
    except Exception as e:
        if retCode==200:
            retCode=500
        result['error']=e.__str__()

    result['result']=retCode

    return jsonify(result), retCode

@app.route('/v1/resources/<srcIP>:<srcPort>/<destIP>:<destPort>',
        methods=['POST','GET','DELETE'])
def rsc(destIP,destPort,srcIP,srcPort):
    retCode=200
    result={}
    try:
        destPort=int(destPort)
        srcPort=int(srcPort)
        if request.method in ['POST']: # ADD
            #if getResource(destIP, destPort) != None:
            #    retCode=403
            #    raise KeyError('resource duplicate. {}'.format((destIP,destPort)))

            #cic=terms.index(None)
            #addResource(cic, destIP, destPort)
            pass
        elif request.method in ['GET','DELETE']:
            pass
            #cic=getResource(destIP, destPort)
            #if not cic:
            #    retCode=404
            #    raise KeyError('resource not found')
            #if request.method in ['GET']:
            #    result['dest']=terms[cic]
            #else :
            #    delResource(cic)
        result['id']=cic
    except ValueError as e:
        retCode=400
        result['error']='input is not a number'
    except TypeError as e:
        retCode=400
        result['error']=e.__str__()
    except Exception as e:
        if retCode==200:
            retCode=500
        result['error']=e.__str__()
    result['result']=retCode

    return jsonify(result), retCode

#@app.route('/v1/resources', methods=['GET','DELETE','POST'])
#def bulkrsc():
#    result={}
#    retCode=200
#
#    try:
#        if request.method == 'GET':
#            result['resources']=list(enumerate(terms))
#            
#        elif request.method == 'POST':
#            data=request.json
#            if data == None:
#                return returnErrorContent(400,'no json content')
#            if not 'resources' in data:
#                return returnErrorContent(400,'invalid json content')
#            for idx, (ip, port) in enumerate(data['resources']):
#                try:
#                    addResource(idx, ip, int(port))
#                except ValueError as e:
#                    return returnErrorContent(400, 'input is not a number')
#                except TypeError as e:
#                    return returnErrorContent(400,e.__str__())
#                    
#        elif request.method == 'DELETE':
#            clearTermsInfo()
#    except werkzeug.exceptions.HTTPException as e:
#        raise e
#    except AttributeError as e:
#        return returnErrorContent(400,'invalid json content')
#    except KeyError as e:
#        retCode=400
#        result['error']=e.__str__()
#    except ValueError as e:
#        retCode=400
#        if 'values to unpack' in str(e):
#            return returnErrorContent(400,'invalid json content')
#        result['error']=e.__str__()
#    except TypeError as e:
#        retCode=400
#        result['error']=e.__str__()
#    except Exception as e:
#        retCode=500
#        result['error']=e.__str__()
#    result['result']=retCode
#
#    return jsonify(result), retCode

def returnErrorContent(code, reason):
    return jsonify({'result':code,'error':reason}), code

def validIPAddrV4(destIP):
    try:
        ocs=destIP.split('.')
        if len(ocs) != 4:
            return False
        for oc in ocs:
            oc=int(oc)
            if oc < 0  or 255 < oc:
                return False
    except ValueError:
        return False
            
    return True

def addResource(cic, destIP, destPort):

    if not validIPAddrV4(destIP):
        raise TypeError('input is not a ip address(v4)')

    terms[cic]=(destIP,destPort)

    if not destIP in rscMap:
        rscMap[destIP]={}

    rscMap[destIP][destPort]=cic

def delResource(cic):
    destIP, destPort=terms[cic]

    del rscMap[destIP][destPort]
    if len(rscMap[destIP]) == 0:
        del rscMap[destIP]

    terms[cic]=None

def getResource(destIP, destPort):
    cic=None
    try:
        cic=rscMap[destIP][destPort]
    except KeyError:
        cic=None
        pass
    return cic

@app.errorhandler(400)
@app.errorhandler(401)
@app.errorhandler(403)
@app.errorhandler(404)
@app.errorhandler(405)
@app.errorhandler(500)
@app.errorhandler(501)
@app.errorhandler(503)
def error_handler(error):
    '''
     Description
      - abort(400 - 405) / abort(500 - 503) した時に
        レスポンスをレンダリングするハンドラ
    '''
    response = jsonify({ 'error': error.name.lower(), 'result': error.code })
    return response, error.code

def clearTermsInfo():
    global terms
    global rscMap
    rscMap={}
    del terms[:]
    for i in range(max_session):
        terms.append(None)

''' main logic '''
def main():
    logger.setLevel(loglevel)
    sh = StreamHandler()
    logger.addHandler(sh)
    formatter = Formatter('%(asctime)s:%(lineno)d:%(levelname)s:%(message)s')
    sh.setFormatter(formatter)

    logger.info('server started...')

    clearTermsInfo()
    logger.debug('session informations were initialized...')

    logger.info('API interface is up...')
    logger.debug('API binded {}:{}...'.format(api_ip,api_port))
    app.run(host=api_ip,port=api_port)

    th.join()
    logger.info('server termsinating...')

if __name__ == '__main__':
    main()

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------

''' Unit Test Cases '''
class TestRtpGen_RESTGW(unittest.TestCase):
    c = None
    def setUp(self):
        global max_session
        max_session=10
        clearTermsInfo()
        self.c = app.test_client()

    def tearDown(self):
        global max_session
        max_session=10
        clearTermsInfo()
        if self.c:
            self.c=None

    def test_clearTermsInfo(self):
        for i in range(max_session):
            self.assertIsNone(terms[i], None)
        self.assertEqual(rscMap, {})
        for i in range(max_session):
            ip='192.168.0.{}'.format(i+1)
            terms[i]=(ip,1234)
            rscMap[ip]={}
            rscMap[ip][1234]=i
        for i in range(max_session):
            self.assertEqual(terms[i], ('192.168.0.{}'.format(i+1),1234))
            self.assertEqual(rscMap['192.168.0.{}'.format(i+1)][1234], i)
        clearTermsInfo()
        self.assertEqual(rscMap, {})
        for i in range(max_session):
            self.assertIsNone(terms[i], None)

    def test_addResource(self):
        addResource(9,'192.168.0.1',5000)
        for i in range(max_session):
            if i !=9 :
                self.assertIsNone(terms[i], None)
            else:
                self.assertEqual(terms[i], ('192.168.0.1',5000))
        self.assertEqual(rscMap['192.168.0.1'][5000],9)
        self.assertEqual(len(rscMap['192.168.0.1']),1)
        self.assertEqual(len(rscMap),1)

    def test_delResource(self):
        terms[9]=('192.168.0.1',5000)
        rscMap['192.168.0.1']={}
        rscMap['192.168.0.1'][5000]=9
        terms[3]=('192.168.0.1',5001)
        rscMap['192.168.0.1'][5001]=3

        for i in range(max_session):
            if i == 3 :
                self.assertEqual(terms[i], ('192.168.0.1',5001))
            elif i == 9 :
                self.assertEqual(terms[i], ('192.168.0.1',5000))
            else:
                self.assertIsNone(terms[i], None)
        delResource(3)

        for i in range(max_session):
            if i !=9 :
                self.assertIsNone(terms[i], None)
            else:
                self.assertEqual(terms[i], ('192.168.0.1',5000))

        self.assertEqual(rscMap['192.168.0.1'][5000],9)
        self.assertEqual(len(rscMap['192.168.0.1']),1)
        self.assertEqual(len(rscMap),1)

    def test_getResource(self):
        terms[9]=('192.168.0.1',5000)
        rscMap['192.168.0.1']={}
        rscMap['192.168.0.1'][5000]=9
        terms[3]=('192.168.0.1',5001)
        rscMap['192.168.0.1'][5001]=3

        for i in range(max_session):
            if i == 3 :
                self.assertEqual(terms[i], ('192.168.0.1',5001))
            elif i == 9 :
                self.assertEqual(terms[i], ('192.168.0.1',5000))
            else:
                self.assertIsNone(terms[i], None)

        self.assertEqual(getResource('192.168.0.1',5000),9)
        self.assertEqual(getResource('192.168.0.1',5001),3)
        self.assertEqual(getResource('192.168.0.1',5002),None)

# ----- API Test ----

## id API
    def test_assign_get(self):
        terms[9]=('192.168.0.1',5000)
        rscMap['192.168.0.1']={}
        rscMap['192.168.0.1'][5000]=9
        
        rs=self.c.get('/v1/id/9')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 200)
        self.assertEqual(data['id'], 9)
        self.assertEqual(data['dest'], ['192.168.0.1',5000])
        self.assertEqual(data['result'], 200)

    def test_assign_get_from_empty(self):
        rs=self.c.get('/v1/id/0')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 200)
        self.assertEqual(data['id'], 0)
        self.assertEqual(data['dest'], None)
        self.assertEqual(data['result'], 200)

    def test_assign_get_invalid_idstr(self):
        rs=self.c.get('/v1/id/ac')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['result'], 400)
        self.assertEqual(data['error'], "input is not a number")

    def test_assign_get_out_of_range(self):
        rs=self.c.get('/v1/id/20')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['result'], 400)
        self.assertEqual(data['error'], "id out of range")

    def test_assign_post(self):
        rs=self.c.post('/v1/id/3/192.168.0.1/2000')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 200)
        self.assertEqual(data['result'], 200)
        self.assertEqual(terms[3], ('192.168.0.1',2000))
        self.assertEqual(rscMap['192.168.0.1'][2000], 3)

    def test_assign_post_to_exist(self):
        terms[3]=('192.168.0.1',5000)
        rscMap['192.168.0.1']={}
        rscMap['192.168.0.1'][5000]=3

        rs=self.c.post('/v1/id/3/192.168.0.1/2000')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 403)
        self.assertEqual(data['result'], 403)
        self.assertEqual(data['error'], "'id:3 already exists'")
        self.assertEqual(terms[3], ('192.168.0.1',5000))
        self.assertEqual(rscMap['192.168.0.1'][5000], 3)

    def test_assign_post_invalid_id_str(self):
        rs=self.c.post('/v1/id/ac/192.168.0.1/2000')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['result'], 400)
        self.assertEqual(data['error'], "input is not a number")

    def test_assign_post_out_of_range(self):
        rs=self.c.post('/v1/id/20/192.168.0.1/2000')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['result'], 400)
        self.assertEqual(data['error'], "id out of range")

    def test_assign_post_invalid_ip_str(self):
        rs=self.c.post('/v1/id/3/123/123')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['result'], 400)
        self.assertEqual(data['error'], "input is not a ip address(v4)")

    def test_assign_post_invalid_port_str(self):
        rs=self.c.post('/v1/id/3/192.168.0.1/ac')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['result'], 400)
        self.assertEqual(data['error'], "input is not a number")

    def test_assign_put(self):
        terms[9]=('192.168.0.1',5000)
        rscMap['192.168.0.1']={}
        rscMap['192.168.0.1'][5000]=9
        
        rs=self.c.put('/v1/id/9/192.168.0.2/5001')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 200)
        self.assertEqual(data['result'], 200)
        self.assertEqual(terms[9], ('192.168.0.2',5001))
        self.assertFalse('192.168.0.1' in rscMap)
        self.assertEqual(rscMap['192.168.0.2'][5001], 9)

    def test_assign_put_from_empty(self):
        rs=self.c.put('/v1/id/9/192.168.0.2/5001')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 404)
        self.assertEqual(data['result'], 404)
        self.assertEqual(data['error'], "'id:9 does not exist'")
        self.assertEqual(set(terms), {None})
        self.assertEqual(len(rscMap), 0)

    def test_assign_put_invalid_id_str(self):
        terms[3]=('192.168.0.1',5000)
        rscMap['192.168.0.1']={}
        rscMap['192.168.0.1'][5000]=3
        rs=self.c.put('/v1/id/ac/192.168.0.1/2000')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['result'], 400)
        self.assertEqual(data['error'], "input is not a number")

    def test_assign_put_out_of_range(self):
        rs=self.c.put('/v1/id/20/192.168.0.1/2000')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['result'], 400)
        self.assertEqual(data['error'], "id out of range")

    def test_assign_post_invalid_ip_str(self):
        terms[3]=('192.168.0.1',5000)
        rscMap['192.168.0.1']={}
        rscMap['192.168.0.1'][5000]=3
        rs=self.c.put('/v1/id/3/123/123')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['result'], 400)
        self.assertEqual(data['error'], "input is not a ip address(v4)")

    def test_assign_post_invalid_port_str(self):
        terms[3]=('192.168.0.1',5000)
        rscMap['192.168.0.1']={}
        rscMap['192.168.0.1'][5000]=3
        rs=self.c.put('/v1/id/3/192.168.0.1/ac')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['result'], 400)
        self.assertEqual(data['error'], "input is not a number")

    def test_assign_del(self):
        terms[9]=('192.168.0.1',5000)
        rscMap['192.168.0.1']={}
        rscMap['192.168.0.1'][5000]=9
        
        rs=self.c.delete('/v1/id/9')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 200)
        self.assertEqual(data['result'], 200)
        self.assertEqual(terms[9], None)
        self.assertFalse('192.168.0.1' in rscMap)
        self.assertEqual(set(terms), {None})
        self.assertEqual(len(rscMap), 0)

    def test_assign_del_from_empty(self):
        rs=self.c.delete('/v1/id/9')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 404)
        self.assertEqual(data['result'], 404)
        self.assertEqual(data['error'], "'id:9 does not exist'")
        self.assertEqual(set(terms), {None})
        self.assertEqual(len(rscMap), 0)

    def test_assign_del_invalid_id_str(self):
        rs=self.c.delete('/v1/id/*')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['result'], 400)
        self.assertEqual(data['error'], "input is not a number")

    def test_assign_del_out_of_range(self):
        rs=self.c.delete('/v1/id/20')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['result'], 400)
        self.assertEqual(data['error'], "id out of range")

## resources API
    def test_rsc_get(self):
        terms[9]=('192.168.0.1',5000)
        rscMap['192.168.0.1']={}
        rscMap['192.168.0.1'][5000]=9
        
        rs=self.c.get('/v1/resources/192.168.0.1/5000')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 200)
        self.assertEqual(data['id'], 9)
        self.assertEqual(data['dest'], ['192.168.0.1',5000])
        self.assertEqual(data['result'], 200)

    def test_rsc_get_from_empty(self):
        rs=self.c.get('/v1/resources/192.168.0.1/3000')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 404)
        self.assertEqual(data['result'], 404)
        self.assertEqual(data['error'], "'resource not found'")

    def test_rsc_get_invalid_ip(self):
        rs=self.c.get('/v1/resources/200/3000')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 404)
        self.assertEqual(data['result'], 404)
        self.assertEqual(data['error'], "'resource not found'")

    def test_rsc_get_invalid_port(self):
        rs=self.c.get('/v1/resources/192.168.0.5/not_number')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['result'], 400)
        self.assertEqual(data['error'], "input is not a number")

    def test_rsc_post(self):
        rs=self.c.post('/v1/resources/192.168.0.1/2000')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 200)
        self.assertEqual(data['result'], 200)
        self.assertEqual(data['id'], terms.index(('192.168.0.1',2000)))
        self.assertEqual(rscMap['192.168.0.1'][2000],
                                     terms.index(('192.168.0.1',2000)))

    def test_rsc_post_to_exist(self):
        terms[3]=('192.168.0.1',2000)
        rscMap['192.168.0.1']={}
        rscMap['192.168.0.1'][2000]=3

        rs=self.c.post('/v1/resources/192.168.0.1/2000')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 403)
        self.assertEqual(data['result'], 403)
        self.assertEqual(terms[3], ('192.168.0.1',2000))
        self.assertEqual(rscMap['192.168.0.1'][2000], 3)

    def test_rsc_post_invalid_ip(self):
        rs=self.c.post('/v1/resources/*/2000')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['result'], 400)
        self.assertEqual(data['error'], "input is not a ip address(v4)")

    def test_rsc_post_invalid_port(self):
        rs=self.c.post('/v1/resources/192.168.0.5/not_number')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['result'], 400)
        self.assertEqual(data['error'], "input is not a number")

    def test_rsc_put(self):
        terms[3]=('192.168.0.1',2000)
        rscMap['192.168.0.1']={}
        rscMap['192.168.0.1'][2000]=3
        rs=self.c.put('/v1/resources/192.168.0.1/2000')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 405)
        self.assertEqual(data['error'], 'method not allowed')
        self.assertEqual(terms[3], ('192.168.0.1',2000))
        self.assertTrue('192.168.0.1' in rscMap)
        self.assertEqual(rscMap['192.168.0.1'][2000], 3)

    def test_rsc_put_invalid_ip(self):
        rs=self.c.put('/v1/resources/192.168.0.5/not_number')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 405)
        self.assertEqual(data['error'], 'method not allowed')

    def test_rsc_put_invalid_port(self):
        rs=self.c.put('/v1/resources/192.168.0.5/not_number')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 405)
        self.assertEqual(data['error'], 'method not allowed')

    def test_rsc_del(self):
        terms[9]=('192.168.0.1',5000)
        rscMap['192.168.0.1']={}
        rscMap['192.168.0.1'][5000]=9
        
        rs=self.c.delete('/v1/resources/192.168.0.1/5000')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 200)
        self.assertEqual(data['id'], 9)
        self.assertEqual(data['result'], 200)
        self.assertEqual(terms[9], None)
        self.assertFalse('192.168.0.1' in rscMap)
        self.assertEqual(set(terms), {None})
        self.assertEqual(len(rscMap), 0)

    def test_rsc_del_invalid_ip(self):
        rs=self.c.delete('/v1/resources/*/500')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 404)
        self.assertEqual(data['result'], 404)
        self.assertEqual(data['error'], "'resource not found'")

    def test_rsc_del_invalid_port(self):
        rs=self.c.delete('/v1/resources/192.168.0.1/*')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['result'], 400)
        self.assertEqual(data['error'], "input is not a number")

## resources bulk API
    def test_bulkrsc_get(self):
        terms[9]=('192.168.0.1',5000)
        rscMap['192.168.0.1']={}
        rscMap['192.168.0.1'][5000]=9
        
        rs=self.c.get('/v1/resources')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 200)
        for i in range(0,9):
            self.assertEqual(data['resources'][i][0], i)
            self.assertIsNone(data['resources'][i][1])
        self.assertEqual(data['resources'][9][0], 9)
        self.assertEqual(data['resources'][9][1], ['192.168.0.1', 5000])
        self.assertEqual(data['result'], 200)

    def test_bulktrsc_post(self):
        resources={'resources':[]}
        for i in range(10):
            ip='192.168.0.{}'.format(i+1)
            resources['resources'].append([ip,5000])
        
        rs=self.c.post('/v1/resources',json=resources)
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 200)

        for i in range(10):
            ip='192.168.0.{}'.format(i+1)
            self.assertEqual(terms[i], (ip,5000))
            self.assertEqual(rscMap[ip][5000], i)

    def test_bulktrsc_post_no_json_body(self):
        rs=self.c.post('/v1/resources')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['error'], "no json content")

    def test_bulktrsc_post_invalid_json_body(self):
        resources={'resource':[]}
        for i in range(10):
            ip='192.168.0.{}'.format(i+1)
            resources['resource'].append([ip,5000])
        
        rs=self.c.post('/v1/resources',json=resources)
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['error'], "invalid json content")

    def test_bulktrsc_post_invalid_ip_str(self):
        resources={'resources':[]}
        for i in range(10):
            ip='192.168.0.{}'.format(i+1)
            resources['resources'].append([ip,5000])
        
        resources['resources'][3]=['345',5000]

        rs=self.c.post('/v1/resources',json=resources)
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['error'], "input is not a ip address(v4)")

    def test_bulktrsc_post_invalid_port(self):
        resources={'resources':[]}
        for i in range(10):
            ip='192.168.0.{}'.format(i+1)
            resources['resources'].append([ip,5000])
        
        resources['resources'][3]=['192.168.0.4','5d000']

        rs=self.c.post('/v1/resources',json=resources)
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['error'], "input is not a number")

    def test_bulktrsc_post_invalid_content_type(self):
        resources={'resources':[['123']]}

        rs=self.c.post('/v1/resources', headers={'content-type': 'application/json'})
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['error'], "bad request")

    def test_bulktrsc_post_invalid_json1(self):
        resources={'resources':[['123']]}

        rs=self.c.post('/v1/resources',json=resources)
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 400)
        self.assertEqual(data['error'], "invalid json content")

    def test_bulkrsc_del(self):
        for i in range(10):
            ip='192.168.0.{}'.format(i+1)
            terms[i]=(ip,5000)
            rscMap[ip]={}
            rscMap[ip][5000]=i
        
        rs=self.c.delete('/v1/resources')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.content_type, 'application/json')
        self.assertEqual(rs.status_code, 200)

        self.assertEqual(rscMap, {})
        for i in range(max_session):
            self.assertIsNone(terms[i], None)

## invalid endpoint
    def test_invalid_endpoint1(self):
        rs=self.c.get('/v0/admin')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.status_code, 404)
        self.assertEqual(data['result'], 404)

    def test_invalid_endpoint2(self):
        rs=self.c.get('/v1/')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.status_code, 404)
        self.assertEqual(data['result'], 404)

    def test_resource_travasal1(self):
        rs=self.c.get('/hoge/../v1/resources')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.status_code, 404)
        self.assertEqual(data['result'], 404)
        self.assertEqual(data['error'], 'not found')

    def test_resource_travasal2(self):
        rs=self.c.get('/../v1')
        data=json.loads(rs.data.decode('utf-8'))
        self.assertEqual(rs.status_code, 404)
        self.assertEqual(data['result'], 404)
        self.assertEqual(data['error'], 'not found')

